#!/usr/bin/env python
"""AES ENCRYPTION DECRYPTION ALGO"""

#Homework Number:hw04
#Name:Dimcho karakashev
#ECN Login: dkarakas
#Due Date: 02/10/17

from BitVector import *

modulous = BitVector(bitstring="100011011")


def ask_user_for_key():
    key = input("Enter key:")
    key = key.strip()
    key = key[0:16]  # takes care of longer keys than 16 bytes
    key += '0' * (16 - len(key))  # takes care of smaller length keys
    key_bv = BitVector(textstring=key)
    return key_bv


def loadFile(nameOfFile):
    with open(nameOfFile, "r") as fileInput:
        rtn_file = fileInput.read().replace('\n', '')
    return rtn_file


def subBytes(wordToSubBytes, enc_dec):
    """word_to_gee_2 needs to be 32 bit"""
    word_into_bytes = []
    for i in range(4):
        word_into_bytes.append(wordToSubBytes[i * 8:i * 8 + 8])
    if enc_dec == "e":
        c = BitVector(bitstring='01100011')
        for num_byte, byte in enumerate(word_into_bytes):
            # print(str(num_byte)  + " " + str(byte))
            #print(byte_mi)
            if byte != BitVector(bitstring='00000000'):
                byte_mi = byte.gf_MI(BitVector(bitstring='100011011'), 8)
            else:
                byte_mi = byte
            b1, b2, b3, b4 = [byte_mi.deep_copy() for x in range(4)]
            byte_mi ^= (b1 >> 4) ^ (b2 >> 5) ^ (b3 >> 6) ^ (b4 >> 7) ^ c
            wordToSubBytes[num_byte * 8:num_byte * 8 + 8] = byte_mi
    else:
        d = BitVector(bitstring='00000101')
        for num_byte, byte in enumerate(word_into_bytes):
            # print(str(num_byte)  + " " + str(byte))
            if byte != BitVector(bitstring='00000000'):
                byte_mi = byte.gf_MI(BitVector(bitstring='100011011'), 8)
            else:
                byte_mi = byte
            b1, b2, b3, b4 = [byte_mi.deep_copy() for x in range(4)]
            byte_mi ^= (b1 >> 2) ^ (b2 >> 5) ^ (b4 >> 7) ^ d
            wordToSubBytes[num_byte * 8:num_byte * 8 + 8] = byte_mi
    return wordToSubBytes


def gee(word_to_gee_2, round_constant):
    word_to_gee = word_to_gee_2.deep_copy()
    word_to_gee << 8
    # SubBytes
    word_to_gee = subBytes(word_to_gee, "e")
    word_to_gee[0:8] ^= round_constant
    return word_to_gee  # before returning I xor the bits with the round constant

def gen_round_const():
    list_round_const = []
    list_round_const.append(BitVector(intVal=0x01, size=8))
    for i in range(1, 10):
        list_round_const.append(list_round_const[i - 1].gf_multiply_modular(BitVector(intVal=0x02), modulous, 8))
    return list_round_const


def key_schedule():
    key_bv = ask_user_for_key()
    list_round_const = gen_round_const()

    key_list_words = [BitVector(textstring="0") for i in range(44)]  # arrenging the input into words [w0,w1,w2,w3]
    for i in range(4):
        key_list_words[i] = key_bv[i * 32:i * 32 + 32]  # put the key in the first 4 words

    for i in range(4, 44):
        if i % 4 == 0:
            key_list_words[i] = key_list_words[i - 4] ^ gee(key_list_words[i - 1], list_round_const[int(i / 4 - 1)])
        else:
            key_list_words[i] = key_list_words[i - 1] ^ key_list_words[i - 4]
    return key_list_words

def shift(l, n):
    return l[n:] + l[:n]

def shiftRows(bitVec, dec_or_enc):
    matrix = [[0 for i in range(4)] for i in range(4)]
    for i in range(4):
        for y in range(4):
            matrix[y][i] = bitVec[i*32+y*8:i*32+y*8+8]

    if dec_or_enc == "e":
        for i in range(1,4):
            shift(matrix[i],i)
    else:
        for i in range(1,4):
            shift(matrix[i],-i)

    for i in range(4):
        for y in range(4):
            bitVec[i*32+y*8:i*32+y*8+8] = matrix[y][i]
    return  bitVec

def mixColumns(bitVec, dec_or_enc):
    matrix = [[0 for i in range(4)] for i in range(4)]
    for i in range(4):
        for y in range(4):
            matrix[y][i] = bitVec[i*32+y*8:i*32+y*8+8]

    if dec_or_enc == "e":
        for row in [x * 32 for x in range(0, 4)]:
            for colm in range(4):
                bitVec[(colm * 8 + row) % 128:((colm * 8 + row +8)) % 129] = bitVec[(colm * 8 + row) % 128:((colm * 8 + row +8)) % 129].gf_multiply_modular(BitVector( intVal=0x02, size=8),modulous,8) \
                            ^ bitVec[((colm + 1) * 8 + row) % 128:(((colm + 1) * 8 + row + 8)) % 129].gf_multiply_modular(BitVector( intVal=0x03, size=8),modulous,8) \
                            ^ bitVec[((colm + 2) * 8 + row) % 128:(((colm + 2) * 8 + row + 8)) % 129] \
                            ^ bitVec[(((colm + 3) * 8 + row) % 128):((((colm + 3) * 8 + row +8)) % 129)]
    else:
        for row in [x * 32 for x in range(0, 4)]:
            for colm in range(4):
                bitVec[(colm * 8 + row) % 128:((colm * 8 + row +8)) % 129] = bitVec[(colm * 8 + row) % 129:((colm * 8 + row +8)) % 129].gf_multiply_modular(BitVector( intVal=0x0E, size=32),modulous,8) \
                                        ^ bitVec[((colm + 1) * 8 + row) % 128:(((colm + 1) * 8 + row + 8)) % 129].gf_multiply_modular(BitVector(intVal=0x0B, size=8),modulous,8) \
                                        ^ bitVec[((colm + 2) * 8 + row) % 128:(((colm + 2) * 8 + row + 8)) % 129].gf_multiply_modular(BitVector(intVal=0x0D, size=8),modulous,8) \
                                        ^ bitVec[(((colm + 3) * 8 + row) % 128):((((colm + 3) * 8 + row +8)) % 129)].gf_multiply_modular(BitVector(intVal=0x09, size=8),modulous,8)

    for i in range(4):
        for y in range(4):
            bitVec[i*32+y*8:i*32+y*8+8] = matrix[y][i]
    return  bitVec

def encrypt(bv,fileOut,keys):
    #cur = 0
    while bv.more_to_read:
        bitvec = bv.read_bits_from_file( 128 )
        #print("Len :" + str(cur))
        size = bitvec.length()
        ##Xor with the 4 words of the key schedule
        for i in range(4):
            bitvec ^= keys[i]
        if size > 0:
            if size < 128:
                bitvec.pad_from_right(128 - size)
            ##EACH ROUND
            for i in range(1,11):
                ##SubBytes
                for i in range(4):
                    bitvec[i * 32:i * 32 + 32] = subBytes(bitvec[i * 32:i * 32 + 32],"e")  # put the key in the first 4 words
                ##ShiftRows
                shiftRows(bitvec,"e")
                ##MixColumns
                mixColumns(bitvec,"e")
                ##AddKeys
                bitvec ^= keys[i*4] ^ keys[i*4 + 1] ^ keys[i*4 + 2] ^ keys[i*4 + 3]
        hexStrToOutput = bitvec.get_bitvector_in_hex()
        fileOut.write(hexStrToOutput)
        #cur += 16


def decrypt(encrypted_str,fileOut,keys):
    #cur = 0
    assert(len(encrypted_str) % 32 == 0), "Not encrypted right! Missing chars!"
    for i in range(int(len(encrypted_str)/32)):
        bitvec = BitVector(hexstring = encrypted_str[i*32: i*32 + 32])
        #print("Len :" + str(cur))
        size = bitvec.length()
        ##Xor the cypher with last 4 words
        for i in reversed(range(40,44)):
            bitvec ^= keys[i]
        if size > 0:
            if size < 128:
                bitvec.pad_from_right(128  - size)
            for i in reversed(range(0, 10)):
                ##ShiftRowss
                shiftRows(bitvec, "d")
                ##Inverse sub bytes
                for i in range(4):
                    bitvec[i * 32:i * 32 + 32] = subBytes(bitvec[i * 32:i * 32 + 32],"d")  # put the key in the first 4 words
                ##Add round keys
                bitvec ^= keys[i*4] ^ keys[i*4 + 1] ^ keys[i*4 + 2] ^ keys[i*4 + 3]
                ##Inverse mix colums
                mixColumns(bitvec, "d")

        bitvec.write_to_file(fileOut)
        #cur += 16






def AES_algo():
    keys = key_schedule()

    try:
        fileOutputEncr = open('encrypted.txt', 'w')
    except:
        print("Error opening encrypted.txt")
        sys.exit(1)
    bvPlainFile = BitVector(filename='plaintext.txt')

    encrypt(bvPlainFile,fileOutputEncr,keys)

    bvPlainFile.close_file_object()
    fileOutputEncr.close()

    try:
        fileOutputDecr = open('decrypted.txt', 'wb')
    except:
        print("Error opening encrypted.txt")
        sys.exit(1)
    encrypted_str = loadFile('encrypted.txt')

    decrypt(encrypted_str,fileOutputDecr,keys)

    fileOutputDecr.close()

if __name__ == "__main__":
    AES_algo()


Key:yayboilermakers!

Encrypted.txt:
c79be573c6e573c626fac6199cdfa0c12693c653268426498426539bfb74fe9c10c6051984e5021973c69b0239740bc1e5052093f4c6f40219c605269c7481b3fa57c60219d7c6fb9b26d7c637c5b3af02c619fa1973192693c626178cdf7b37e5d78ec6f9d7c69302022073b3c58c37539326e5fac6f40219c6fb02de7b6937d79be5fa20c6fa02d79be5fa6874399473c6fb8402fa49c6fbe5d79bb30b7be5c6f9fac64c2605d79cc6fa027b77370949c6e573c6fb8402fa49c6fb373ce537e5d72ec6f9d7c6e573c619fadec5de9493c6d79b0219499b06c686d7de887d37e5d79cc626fa57c6d79be5fac574ba3d0219d7c6e5d79cc61719d7c67d39de3773d7e59393c61026f4c6fa027b7481b3fa57c626faf4d79be5fa49c68c886968c61c19d7c6e54cc6f40219c639392485c626d7c6e5d7c626c617e5d720747df819c610e5499bd7c64ce5fa57b339debe2ec6c784f4c6d702c65702c6a039b3b0e5d79b0219d7c626faf4c6058c7df02be5fa492ec6f20219c61002737b7477fa0217261793f4c6fb02fa40d72074babec64ce58473d79cc64ce5fa57b37d9c4ad79be5fa49c6532684d7e505de7bbafa93f4c6025757c60284c619fadec5de9493c60284c6e5fac626faf4c6397d7d3757e57373e510e5932684c6d78c74ba09f4c6028457e5fa2684f4c6058cde77f873e5d7e502fa06c6c79b26d7b30ba037fa02d7c626d7c6269393c673dea377fae573e5fa499cc64c0284c6e57b7437afc6fa02c673d78426e5fac6d78c74bad30502105393e5739bc6e5fac6a039b3af9b0284d7c626c65326842649247d772bc626c673d719fad7c673e510377bbafac6d702c6d79b26d7c6fb9be5f077b394fac62619d79b0284c657e557b33ce5fa0219499b0219d7c6269393c68c1bb32be573c6170202209cc6fbe5d7e539debec6735302e593e5fa49c626c668398c6ec6fb84e5d7e5fa49c60002172074ba0957c6e5d7c6fb2673c6fa02c6a0deba2693c617020220c626d7c6d72e7d7b68fe
Decrypted.txt:
õõõõlõõllll			\llõlõllõlõõ	M:Mlõõõõlõ	M\\õõlõlõlõl	M:l×l×llõl×l	\:ollõllll	õ×llõ×llõM\\õlõllõll\	:×õõllll×õõl	M		õllõllllõ×õM\olõllõlõ×õll\		Žllõõllõllll	Mõ×llõ×lõõll\\o	l×õlõõl×\:	õ×õlll×l×õõlŽMo×lõ×õll×loõ×õllõll\M:l×lllõ×õõlll::\l×lõõlõl	:	ll×lõ×llllõ×M	\lõlõ×lõõl×Mo	llõõõl×l×lo:õ×õ×lllõlõMo	õlllllõ\M		lllõlllõ×Mo	lõõõõ×õlõõl×MM	o×õõlllõlõ×õõ\	o	õl××lõll\\o	lõlõllllõl	M	×õõõõõlõl×MoŽõlõ×õllõõlõ		\õõ×õlõlõõl×M\	l×ll×lllõ\o		õõõllõlõõlõ\M	olllõ×õlõll×MoMõõõõõlõllo:oõõ×lllõlõll	M		lllõ×l×lõõ		o	l×l×õl×llõõ:	:	lll×õõl×õ×MM	lõ×lllo:	õõlllõllõ×Mo	lõõõõlllll	\	llõõ×õllllMoŽ×lõ×lllõlllo	oMlllll×l×l		